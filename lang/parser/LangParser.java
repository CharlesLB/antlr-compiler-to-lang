package lang.parser;

import lang.ast.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class LangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njZsqFmY0CX0yw9coEHJTZug$rP#kcrgDXYn#4F7VqXQG5SCCH0gyFyw1ljAgweCK1IL$" +
		"wr1MDVX3HytOOg1d1wh4wu8YdDbGnX9d0ZADwKs2ymqv74ica$3wJI2RIaxdqrTuBkPAXn9" +
		"nitMfywqzVhdxQSZMUgu$uSxZTiWTb7qSLuhcN6C5c5wGla2uaXW==");

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Prog = StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [1] StmtList = Stmt.s SEMI StmtList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(s, l);
				}
			},
			new Action() {	// [2] StmtList = Stmt.s SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [3] Stmt = ID.v ASSIGNMENT Expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return new Assign(new ID(v), e);
				}
			},
			new Action() {	// [4] Stmt = Expr.a PLUS Expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [5] Expr = ID.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					 return new ID(v);
				}
			},
			new Action() {	// [6] Expr = Expr.a PLUS Expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
